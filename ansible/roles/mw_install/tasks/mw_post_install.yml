---
- name: MW | generate selfsigned certs
  block:
    - name: MW | Clear keystore folder in CLUSTER if exists
      shell: mv {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore_{{ ansible_date_time['iso8601'] }}
      ignore_errors: True

    - name: MW | create keystore folder in cluister
      file:
        path: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
        state: directory
        owner: oracle
        group: oinstall
        mode: '750'

    - name: MW | Creating keystore
      shell: |
        {{ JAVA_HOME }}/bin/keytool -genkey \
          -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -validity 3650 \
          -alias {{ MW_HOSTS }} \
          -dname "CN={{ ENV }}_{{ DOMAIN_NAME }}, OU=RV, O=DevOps, L=Alpharetta, ST=GA, C=US" \
          -keypass {{ WEBLOGIC_PASSWORD }} \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -keystore identity.jks
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Self Signing the Certificate
      shell: |
        {{ JAVA_HOME }}/bin/keytool -selfcert \
          -alias {{ MW_HOSTS }} \
          -dname "CN={{ ENV }}_{{ DOMAIN_NAME }}, OU=RV, O=DevOps, L=Alpharetta, ST=GA, C=US" \
          -keypass {{ WEBLOGIC_PASSWORD }} \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -keystore identity.jks
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Exporting the Server certificate
      shell: |
        {{ JAVA_HOME }}/bin/keytool -export \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/cert.cer \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/identity.jks \
          -storepass {{ WEBLOGIC_PASSWORD }}
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Creating Trust Store
      shell: |
        {{ JAVA_HOME }}/bin/keytool -import \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/cert.cer \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/trust.jks \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -noprompt
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Generate {{ MW_HOSTS }}.csr
      shell: |
        {{ JAVA_HOME }}/bin/keytool -certreq \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/{{ MW_HOSTS }}.csr \
          -ext ExtendedKeyUsage=serverAuth,clientAuth \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/identity.jks \
          -storepass {{ WEBLOGIC_PASSWORD }}
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
      tags: mw_csr

    - name: Upload files to artifactory
      shell: |
        CHECKSUM=$(md5sum {{ item }} | awk '{ print $1 }')
        curl --header "X-Checksum-MD5:${CHECKSUM}" \
          -u{{ artifactory_user }}:{{ artifactory_password }} \
          -T ./{{ item }} \
          {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/{{ item }}
      loop:
        - trust.jks
        - "{{ MW_HOSTS }}.csr"
        - cert.cer
        - identity.jks
      register: upload
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
      tags: mw_csr

    - debug:
        msg: "{{ upload }}"
      tags: mw_csr

    - name: Show download url
      vars:
        msg: |
          Pls use the following link to download
          ##### CSR Download url ###
          {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/{{ MW_HOSTS }}.csr
          ##########################
          Note: only CSR is needed for cert request
          JKS: {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/identity.jks
          Browse all: {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}
      debug:
        msg: "{{ msg.split('\n') }}"
      tags:
        - show_url

    - name: MW | Copy keystore Template files to the {{ SCRIPT_HOME }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ SCRIPT_HOME }}/{{ item.dest }}"
        mode: '+x'
      loop:
        - { src: keystore.py.j2, dest: keystore.py }

    - name: MW | Run keystore.py
      ansible.builtin.shell: |
        . ./setWlstEnv.sh
        java weblogic.WLST {{ SCRIPT_HOME }}/keystore.py > {{ LOGS_DIR }}/keystore.log
      args:
        chdir: "{{ ORACLE_HOME }}/oracle_common/common/bin/"

    - name: MW | Wait until the string "completed" is in the file {{ LOGS_DIR }}/keystore.log before continuing
      wait_for:
        path: "{{ LOGS_DIR }}/keystore.log"
        search_regex: completed

  tags: keystore
  run_once: yes
  become_user: oracle
  delegate_to: "{{ groups[MW_HOSTS][0] }}"

- name: MW | Update - Cluster | LB | NM Pass | RemoteAnonymous | KeyStore
  block:
    - name: MW | Copy wl_conf_update Template files to the {{ SCRIPT_HOME }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ SCRIPT_HOME }}/{{ item.dest }}"
        mode: '+x'
      loop:
        - { src: wl_conf_update.py.j2, dest: wl_conf_update.py }
      tags: wl_conf_update

    - name: MW | Run wl_conf_update
      ansible.builtin.shell: |
        . ./setWlstEnv.sh
        java weblogic.WLST {{ SCRIPT_HOME }}/wl_conf_update.py > {{ LOGS_DIR }}/wl_conf_update.log
      args:
        chdir: "{{ ORACLE_HOME }}/oracle_common/common/bin/"
      register: update_result
      until: update_result.rc == 0
      retries: 4
      delay: 30
      ignore_errors: yes
      tags: wl_conf_update

    - name: MW | Wait until the string "completed" is in the file {{ LOGS_DIR }}/wl_conf_update.log before continuing
      wait_for:
        path: "{{ LOGS_DIR }}/wl_conf_update.log"
        search_regex: completed
      tags: wl_conf_update

    - name: AIA | GRANT UNLIMITED TABLESPACE TO AIA_COMMS_XREF
      shell: |
        export ORACLE_HOME={{ ORACLE_CLIENT_HOME }}; export PATH=$ORACLE_HOME/bin:$PATH
        sqlplus {{ SYSDB_USER }}/{{ DB_PASSWORD }}@{{ DB_HOST_NAME }}:{{ DB_PORT }}/{{ DB_NAME }} <<< "GRANT UNLIMITED TABLESPACE TO AIA_COMMS_XREF;"
      register: AIA_COMMS_XREF
      when: SUITE == "AIA"

    - debug: var=AIA_COMMS_XREF.stdout_lines
      when: SUITE == "AIA"

  tags: mw_post_conf
  run_once: yes
  become_user: oracle
  delegate_to: "{{ groups[MW_HOSTS][0] }}"

- name: MW | splunk permissions
  block:  
    - name: setup splunk permissions
      ansible.builtin.file:
        path: /opt/splunk
        owner: splunk
        group: splunk
        recurse: yes
    
    - name: Splunk Permissions Admin Server
      ansible.builtin.shell: setfacl -Rm u:splunk:r-x,d:u:splunk:r-x {{ A_SERVER }}
      register: splunk_permissions_admin
      ignore_errors: yes
      delegate_to: "{{ groups[MW_HOSTS][0] }}"
      run_once: yes
    
    - ansible.builtin.debug: var=splunk_permissions_admin.stdout_lines
      run_once: yes
    
    - name: Splunk Permissions Managed Servers
      ansible.builtin.shell: setfacl -Rm u:splunk:r-x,d:u:splunk:r-x {{ M_SERVER }}
      register: splunk_permissions_managed
      ignore_errors: yes
    - ansible.builtin.debug: var=splunk_permissions_managed.stdout_lines
    
    - name: Restart Splunk Forwarder
      ansible.builtin.shell: /opt/splunk/splunkforwarder/bin/splunk restart
      register: splunk_forwarder_restart
      tags: splunk_forwarder_restart

    - ansible.builtin.debug: var=splunk_forwarder_restart.stdout_lines
      tags: splunk_forwarder_restart

  tags: splunk_permissions

- name: MW | init scripts
  import_tasks: init.yml
  tags: init

- name: MW | Cron
  block:
    - name: Add oracle in /etc/cron.allow
      ansible.builtin.copy:
        dest: /etc/cron.allow
        content: "oracle\n"

    - name: create {{ ORACLE_PATH }}/scripts
      ansible.builtin.file:
        path: "{{ ORACLE_PATH }}/{{ item }}"
        state: "directory"
        owner: oracle
        group: oinstall
        mode: '750'
        recurse: yes
      loop:
        - backup
        - scripts
        - scripts/logs

    - name: copy scripts
      ansible.builtin.copy:
        src: "utilities/{{ item }}"
        dest: "{{ ORACLE_PATH }}/scripts"
        owner: oracle
        group: oinstall
        mode: '750'
      loop:
        - admin-threaddump.sh
        - admin-heapdump.sh
        - managed-threaddump.sh
        - hoggingthreads.sh
        - start-stop-ProcessCustomerOrderMagentoJMSConsumer.sh
        - admin-monitor.sh
        - admin-Queue-monitor.sh
        - wl-monitor.sh
        - networkTrafic.sh
        - diskusage.sh

    - name: copy dump templates
      ansible.builtin.template:
        src: "utilities/{{ item.src }}"
        dest: "{{ ORACLE_PATH }}/scripts/{{ item.dest }}"
        owner: oracle
        group: oinstall
        mode: '750'
      loop:
        - { src: purgeQueues.py.j2, dest: purgeQueues.py }
        - { src: purgeQueues.sh.j2, dest: purgeQueues.sh }
        - { src: serversstatus.py.j2, dest: serversstatus.py }
        - { src: logRotation.sh.j2, dest: logRotation.sh }
      tags: dump_templates

    - name: copy bashrc - alias
      ansible.builtin.template:
        src: "utilities/bashrc.j2"
        dest: /home/oracle/.bashrc
        owner: oracle
        group: oinstall
        mode: '750'
      tags: alias

    - name: ManageServerCron
      ansible.builtin.cron:
        name: "{{ item.name }}"
        user: oracle
        backup: yes
        state: present
        minute: "{{ item.minute }}"
        hour: "{{ item.hour | default('*') }}"
        job: "{{ item.job }}"
      loop:
#        - { name: networkTrafic, job: "sh {{ ORACLE_PATH }}/scripts/networkTrafic.sh", minute: '*/30' }
#        - { name: logRotation, job: "sh {{ ORACLE_PATH }}/scripts/logRotation.sh", minute: 55, hour: 23 }
        - { name: spool, job: ">/var/spool/mail/oracle", minute: 0, hour: 0 }
#        - { name: diskusage, job: "sh {{ ORACLE_PATH }}/scripts/diskusage.sh", minute: '*/20' }
      tags: crontab

#    - name: AdminServerCron
#      ansible.builtin.cron:
#        name: "{{ item.name }}"
#        user: oracle
#        backup: yes
#        state: absent
#        minute: "{{ item.minute }}"
#        hour: "{{ item.hour | default('*') }}"
#        job: "{{ item.job }}"
#      loop:
#        - { name: serversstatus, job: "sh {{ ORACLE_PATH }}/scripts/serversstatus.sh", minute: 20 }
#        - { name: deletefiles, job: "sh {{ ORACLE_PATH }}/scripts/deletefiles.sh", minute: '*/20' }
#      tags: crontab
#      run_once: yes
#      delegate_to: "{{ groups[MW_HOSTS][0] }}"

  tags: cron