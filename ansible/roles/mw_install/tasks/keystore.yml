- name: MW | generate selfsigned certs
  block:
    - name: MW | backup keystore folder in CLUSTER if exists
      shell: mv {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore_{{ ansible_date_time['iso8601'] }}
      ignore_errors: True

    - name: MW | create keystore folder in cluister
      file:
        path: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
        state: directory
        owner: oracle
        group: oinstall
        mode: '750'

    - name: MW | Creating keystore
      shell: |
        {{ JAVA_HOME }}/bin/keytool -genkey \
          -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -validity 3650 \
          -alias {{ MW_HOSTS }} \
          -dname "CN={{ ENV }}_{{ DOMAIN_NAME }}, OU=RV, O=DevOps, L=Alpharetta, ST=GA, C=US" \
          -keypass {{ WEBLOGIC_PASSWORD }} \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -keystore identity.jks
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Self Signing the Certificate
      shell: |
        {{ JAVA_HOME }}/bin/keytool -selfcert \
          -alias {{ MW_HOSTS }} \
          -dname "CN={{ ENV }}_{{ DOMAIN_NAME }}, OU=RV, O=DevOps, L=Alpharetta, ST=GA, C=US" \
          -keypass {{ WEBLOGIC_PASSWORD }} \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -keystore identity.jks
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Exporting the Server certificate
      shell: |
        {{ JAVA_HOME }}/bin/keytool -export \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/cert.cer \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/identity.jks \
          -storepass {{ WEBLOGIC_PASSWORD }}
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Creating Trust Store
      shell: |
        {{ JAVA_HOME }}/bin/keytool -import \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/cert.cer \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/trust.jks \
          -storepass {{ WEBLOGIC_PASSWORD }} \
          -noprompt
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"

    - name: MW | Generate {{ MW_HOSTS }}.csr
      shell: |
        {{ JAVA_HOME }}/bin/keytool -certreq \
          -alias {{ MW_HOSTS }} \
          -file {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/{{ MW_HOSTS }}.csr \
          -ext ExtendedKeyUsage=serverAuth,clientAuth \
          -keystore {{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore/identity.jks \
          -storepass {{ WEBLOGIC_PASSWORD }}
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
      tags: mw_csr

    - name: Upload files to artifactory
      shell: |
        CHECKSUM=$(md5sum {{ item }} | awk '{ print $1 }')
        curl --header "X-Checksum-MD5:${CHECKSUM}" \
          -u{{ artifactory_user }}:{{ artifactory_password }} \
          -T ./{{ item }} \
          {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/{{ item }}
      loop:
        - trust.jks
        - "{{ MW_HOSTS }}.csr"
        - cert.cer
        - identity.jks
      register: upload
      args:
        chdir: "{{ CLUSTER }}/{{ DOMAIN_NAME }}/security/keystore"
      tags: mw_csr

    - debug:
        msg: "{{ upload }}"
      tags: mw_csr

    - name: Show download url
      vars:
        msg: |
          Pls use the following link to download
          ##### CSR Download url ###
          {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/{{ MW_HOSTS }}.csr
          ##########################
          Note: only CSR is needed for cert request
          JKS: {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}/identity.jks
          Browse all: {{ artifactory_base_url }}/ssl-certs/{{ region }}/{{ MW_HOSTS }}
      debug:
        msg: "{{ msg.split('\n') }}"
      tags:
        - show_url

    - name: MW | Copy keystore Template files to the {{ SCRIPT_HOME }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ SCRIPT_HOME }}/{{ item.dest }}"
        mode: '+x'
      loop:
        - { src: keystore.py.j2, dest: keystore.py }

    - name: MW | Run keystore.py
      ansible.builtin.shell: |
        . ./setWlstEnv.sh
        java weblogic.WLST {{ SCRIPT_HOME }}/keystore.py > {{ LOGS_DIR }}/keystore.log
      args:
        chdir: "{{ ORACLE_HOME }}/oracle_common/common/bin/"

    - name: MW | Wait until the string "completed" is in the file {{ LOGS_DIR }}/keystore.log before continuing
      wait_for:
        path: "{{ LOGS_DIR }}/keystore.log"
        search_regex: completed

  tags: keystore
  run_once: yes
  become_user: oracle
  delegate_to: "{{ groups[MW_HOSTS][0] }}"