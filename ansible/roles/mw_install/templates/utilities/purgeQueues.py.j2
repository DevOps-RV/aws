status=StringBuffer("****\n")

try:

    connect('{{ WEBLOGIC_USERNAME }}', '{{ WEBLOGIC_PASSWORD }}', 't3://{{ groups[MW_HOSTS][0] }}:{{ MW_ADMIN_PORT }}')
    serverNames = cmo.getServers()
    domainRuntime()

    import datetime
    import time
    from datetime import datetime, timedelta
    from weblogic.jms.extensions import JMSMessageInfo
    from javax.jms import TextMessage
    from javax.jms import ObjectMessage

    pdt = datetime.now() - timedelta(days=65)
    pdts = int(time.mktime(pdt.timetuple()))
    pdtsm = pdts*1000

    for name in serverNames:
	sname = name.getName()
        if sname.find("AIA") != -1 :
	    cd("/ServerRuntimes/"+sname+"/JMSRuntime/"+sname+".jms")
            jmsServerNames = cmo.getJMSServers()
            for jmsserv in jmsServerNames:
		jsname = jmsserv.getName()
                if jsname.find("AIAJMSServer") != -1 :
		    cd("/ServerRuntimes/"+sname+"/JMSRuntime/"+sname+".jms/JMSServers/"+jmsserv.getName())
                    queues = cmo.getDestinations()
                    for q in queues:
			qname = q.getName()
                        if qname.find("ErrorQ") != -1 :
			    cd("/ServerRuntimes/"+sname+"/JMSRuntime/"+sname+".jms/JMSServers/"+jmsserv.getName()+"/Destinations/"+qname)
                            mcount = cmo.getMessagesCurrentCount()
                            pcount = 0
                            if int(mcount) > 1 :
				cursor = cmo.getMessages('',0)
                                messages = cmo.getNext(cursor,cmo.getCursorSize(cursor))
                                for message in messages:
					jmsmsginfo = JMSMessageInfo(message)
                                        wlmsg = jmsmsginfo.getMessage()
                                        wlmsgid = wlmsg.getJMSMessageID()
                                        fullcursormsg = cmo.getMessage(cursor,wlmsgid)
                                        fulljmsmsginfo = JMSMessageInfo(fullcursormsg)
                                        handle = fulljmsmsginfo.getHandle()
                                        compdata = cmo.getMessage(cursor, handle)
                                        msgwithbody = JMSMessageInfo(compdata)
                                        mts = msgwithbody.getMessage().getJMSTimestamp()
                                        if mts < pdtsm:
						pcount = int(pcount)+1
                                                pmid = msgwithbody.getMessage().getJMSMessageID()
                                                cmo.deleteMessages("JMSMessageID IN('"+pmid+"')")
                                if pcount > 0 :
                                        apcount = cmo.getMessagesCurrentCount()
                                        status = status.append("-------------------------------------------------\n"+qname+"\nMessages before purging\t"+str(mcount)+"\nMessages after purging\t"+str(apcount)+"\nMessages purged\t"+str(pcount)+"\n\n")
    disconnect()

except:
    status = status.append("Unable to connect to admin server")
    #status = status.append(traceback.print_exc())

op = open("/opt/scripts/purge-status.log","w")
print >> op, status
sys.exit(0)
exit()


